{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocstrings-python-betterrefs","text":"<p>Python handler for mkdocstrings with improved handling for cross-references, including relative ones.</p> <p>mkdocstrings is an awesome plugin for MkDocs that can generate Markdown API documentation from comments in code. The standard python handler (mkdomkdocstrings-python) allows you to create cross-reference links using the syntax <code>[&lt;title&gt;][&lt;path&gt;]</code> where the path must either be the fully qualified name of the referent or is empty, in which case the path is taken from the title.</p> <p>mkdocstrings-python does already have support for cross-references, however, it is currently only available in the insiders edition, which is limited to their sponsors. Additionally, this implementation is fairly limited in comparison to what this project offers.</p> <p>Tip</p> <p>For more information on the mkdocstrings-python official support of relative cross-references, check out the feature request proposing them: here, and the docs detailing the configuration option: here.</p> <p>Even though the issue proposed the syntax similar to that used by this handler, the official relative crossrefs support ended up being a very limited version of it.</p> <p>It is expected that relative cross-references will make it into the open-source version once a funding goal of $2,000 is reached. You can see the current progress towards this goal here.</p> <p>This package extends mkdocstrings-python to support an improved cross-reference syntax, that allows you to write your doc-strings with these nicer cross-references. The primary goal is making cross-references shorter and less repetitive.</p> <p>Do note that this project is a fork of the original mkdocstrings-python-xref. For more info, see our fork notice section</p>"},{"location":"config/","title":"Configuration","text":"<p>Configuration is the same as with mkdocstrings-python except that the handler name should be <code>python_betterrefs</code> instead of <code>python</code>. Because this handler extends the standard mkdocstrings-python handler, the same options are available.</p> <p>Additional options are added by this extension. Currently, there are two:</p> <ul> <li> <p>better_crossrefs - If set to true enables use of better cross-reference syntax provided by this handler   extension (setting this to false would essentially mimic the <code>python</code> handler). This is enabled by default, so you   shouldn't need to specify it unless you want to disable this behavior.</p> </li> <li> <p>check_crossrefs - Enables early checking of all cross-references. Note that this option only takes affect if   better_crossrefs is also true. This option is true by default, so you only need to specify it if you wish to   disable this checking. Checking can also be disabled on a per-case basis by prefixing a reference with '?', e.g.   <code>[something][?dontcheckme]</code>.</p> </li> </ul> <p>mkdocs.yml plugins specification using this handler</p> <pre><code>plugins:\n    - search\n    - mkdocstrings:\n        default_handler: python_betterrefs\n        handlers:\n            python_betterrefs:\n                options:\n                    docstring_style: google\n                    docstring_options:\n                        ignore_init_summary: true\n                    merge_init_into_class: true\n                    better_crossrefs: true\n                    check_crossrefs: false\n                    separate_signature: true\n                    show_source: true\n                    show_root_full_path: true\n                inventories:\n                    - https://docs.python.org/3/objects.inv\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>Installing alongside <code>mkdocstrings-python</code></p> <p>You don't need to explicitly specify <code>mkdocstrings-python</code> as a dependency, as this package already lists it as it's internal dependency, which means installing <code>mkdocstrings-python-betterrefs</code> will also install <code>mkdocstrings-python</code> for you.</p>"},{"location":"install/#pypi-stable-version","title":"PyPI (stable) version","text":"<p><code>mkdocstrings-python-betterrefs</code> is available on PyPI and can be installed like any other python library with:</p>  pip poetry rye uv pdm <pre><code>pip install mkdocstrings-python-betterrefs\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>poetry add mkdocstrings-python-betterrefs\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add mkdocstrings-python-betterrefs\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv pip install mkdocstrings-python-betterrefs\n</code></pre> <p>uv is an ultra fast dependency resolver and package installer, written in Rust.</p> <pre><code>pdm add mkdocstrings-python-betterrefs\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p>"},{"location":"install/#latest-git-version","title":"Latest (git) version","text":"<p>We don't guarantee stability with method of installing</p> <p>If you wish to install the latest available version (the one you currently see in the <code>main</code> git branch), you may instead choose this method of installing.</p> <p>This kind of installation should only be done if you wish to test some new unreleased features and it's likely that you will encounter bugs.</p> <p>That said, this library is still in development, and there may be some features that you might wish to try, even though they're not yet available in the latest release. This method of installation allows you to do just that.</p> <p>To install the latest version of <code>mkdocstrings-python-betterrefs</code> directly from the <code>main</code> git branch, use:</p>  pip poetry rye uv pdm <pre><code>pip install 'mkdocstrings-python-betterrefs@git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs@main'\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>poetry add 'git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs#main'\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add mkdocstrings-python-betterrefs --git='https://github.com/ItsDrike/mkdocstrings-python-betterrefs' --branch main\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv pip install 'mkdocstrings-python-betterrefs@git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs@main'\n</code></pre> <p>uv is an ultra fast dependency resolver and package installer, written in Rust.</p> <pre><code>pdm add \"git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs@main\"\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#relative-cross-references","title":"Relative cross-references","text":"<p>As already mentioned before, <code>mkdocstrings-python-betterrefs</code> allows you to use a custom improved syntax when specifying your cross-references, to make your references shorter and easier to comprehend. The most important feature is the relative cross-references support. Check the example below:</p> AbsoluteRelative mypkg/mymod.py<pre><code>class OtherClass: ...\n\nclass MyClass:\n    def other_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        See [other_method][mypkg.mymod.MyClass.other_method] and\n        the [OtherClass][mypkg.mymod.OtherClass].\n        \"\"\"\n</code></pre> mypkg/mymod.py<pre><code>class OtherClass: ...\n\nclass MyClass:\n    def other_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        See [other_method][..other_method] and\n        the [OtherClass][(m).OtherClass]\n        \"\"\"\n</code></pre> <p>The relative path specifier works as follows:</p> <ul> <li><code>(c)</code>: Replaced by the path of the class that contains the docstring.</li> <li><code>(m)</code>: Replaced by the path of the module that contains the docstring.</li> <li> <p><code>(p)</code>: Replaced by the path of the package that contains the docstring. (If this is a stand-alone module, this module will be treated as a package.)</p> </li> <li> <p>One or more <code>.</code> characters: Expanded to the path of the current docstring (or its parent elements).</p> <p>For example, in a method's docstring:</p> <ul> <li><code>.</code> is replaced by the method name,</li> <li><code>..</code> is replaced by the class name, and</li> <li><code>...</code> is replaced by the module name.</li> </ul> </li> <li> <p>One or more <code>^</code> characters: Replaced by the path of the parent element. This is a shorthand for .., which is   commonly used.</p> <p>For instance, in a method's docstring:</p> <ul> <li><code>^</code> is replaced by the class name, and</li> <li><code>^^</code> is replaced by the module name.</li> </ul> </li> </ul> <p>Note</p> <p>When using either <code>^</code> or <code>..</code> we have found that going up more than one or two levels makes cross-references difficult to read and should be avoided</p>"},{"location":"usage/#avoiding-repetition","title":"Avoiding repetition","text":"<p>In addition to relative reference support, there's special handling to reduce repetitive reference declarations in the title and the cross-reference target. For instance, instead of writing <code>[MyClass][..MyClass]</code>, you can simply write <code>[MyClass][..]</code>, resulting in a much cleaner and more compact syntax.</p> <p>This rule applies when the cross-reference path ends with a period (<code>.</code>); in such cases, the title text is automatically appended to the path (ignoring any bold, italic, or code markup).</p>"},{"location":"usage/#demonstration","title":"Demonstration","text":"<p>Quick demonstration:</p> mkdocstrings-python-betterrefsmkdocstrings-python this_package/this_module.py<pre><code>def some_func(): ...\n\nclass MyClass:\n    def that_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        [MyClass][^]\n        Also [MyClass][(c)]\n        And [`MyClass`][(m).] yet again\n        [`that_method`][^.]\n        Also [`that_method`][..]\n        [init method][(c).__init__]\n        [this module][(m)]\n        [this package][(p)]\n        [that module][(p).that_module] or [that module][(p).]\n        [OtherClass][(m).]\n        [some_func][^^.] or [some_func][...]\n        \"\"\"\n</code></pre> this_package/this_module.py<pre><code>def some_func(): ...\n\nclass MyClass:\n    def that_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        [MyClass][this_package.this_module.MyClass]\n        Also [MyClass][this_package.this_module.MyClass]\n        And [`MyClass`][this_package.this_module.MyClass] yet again\n        [`that_method`][this_package.this_module.MyClass.that_method]\n        Also [`that_method`][this_package.this_module.MyClass.that_method]\n        [init method][this_package.this_module.MyClass.__init__]\n        [this module][this_package.this_module]\n        [this package][this_package]\n        [that module][this_package.that_module] or [that module][this_package.that_module]\n        [OtherClass][this_package.this_module.OtherClass]\n        [some_func][this_package.this_module.some_func] or [some_func][this_package.this_module]\n        \"\"\"\n</code></pre>"},{"location":"usage/#cross-reference-checking","title":"Cross-reference checking","text":"<p>If <code>check_crossrefs</code> is enabled (default), then all cross-reference expressions will be validated to ensure that they exist. Failures will be reported with the source location information.</p> <p>If disabled, missing cross-references will still be reported by <code>mkdocstrings</code> directly, but these reports lack source location details, which can make it challenging to locate the problematic docstring.</p> <p>Note that the errors generated by this feature are in addition to the errors from <code>mkdocstrings</code>, which will mean you will see 2 errors for each invalid reference.</p> <p>Warning</p> <p>The current implementation of this feature can produce false errors for definitions from the python standard library, or external imported libraries. You can disable the check on a case-by-case basis by prefixing the reference expression with a <code>?</code>, for example:</p> <pre><code>def foo() -&gt; pathlib.Path:\n    \"\"\"\n    This function returns a [Path][?pathlib.] instance.\n    \"\"\"\n</code></pre>"},{"location":"contributing/bugs-and-feature-reqs/","title":"Bug Reports &amp; Feature Requests","text":"<p><code>mkdocstrings-python-betterrefs</code> is an actively maintained project, and we welcome contributions in the form of both bug reports and feature requests. This guide will help you understand how to effectively submit an issue, whether it's reporting a bug or proposing a new feature.</p>"},{"location":"contributing/bugs-and-feature-reqs/#before-creating-an-issue","title":"Before creating an issue","text":"<p>Before opening a new issue with your bug report, please do the following things:</p>"},{"location":"contributing/bugs-and-feature-reqs/#upgrade-to-the-latest-version","title":"Upgrade to the latest version","text":"<p>Chances are that the bug you discovered was already fixed in a subsequent version. Thus, before reporting an issue, ensure that you're using the latest version of <code>mkdocstrings-python-betterrefs</code>.</p> <p>Bug fixes are not backported</p> <p>Please understand that only bugs that occur in the latest version will be addressed. Also, to reduce duplicate efforts, fixes cannot be backported to earlier versions, except as a hotfix to the latest version, diverging from the not yet finished features, even if already in the <code>main</code> branch.</p> <p>Due to the nature of our versioning, that might mean that if you require an older version of <code>mkdocstrings</code>, or other dependencies of this project, you might be stuck with an older, buggy version of this library.</p>"},{"location":"contributing/bugs-and-feature-reqs/#search-for-existing-issues","title":"Search for existing issues","text":"<p>It's possible that the issue you're having was already reported. Please take some time and search the existing issues in the GitHub repository for your problem. If you do find an existing issue that matches the problem you're having, simply leave a  reaction instead (avoid commenting \"I have this issue too\" or similar, as that ultimately just clutters the discussion in that issue, but if you do think that you have something meaningful to add, please do).</p> <p>Note</p> <p>Make sure to also check the closed issues. By default, github issue search will start with: <code>is:issue is:open</code>, remove the <code>is:open</code> part to search all issues, not just the opened ones. It's possible that we seen this issue before, but closed the issue as something that we're unable to fix.</p> <p>In case you found a relevant issue, however, it has already been closed as implemented (not as declined / not planned), but the bug / proposed feature is still somehow relevant, don't be worried to drop a comment on this older issue, we will get notifications for those too. That said, if you think there is sufficient new context now, it might also make sense to open a new issue instead, but make sure to at least mention the old issue if you choose this route.</p>"},{"location":"contributing/bugs-and-feature-reqs/#creating-a-new-issue","title":"Creating a new issue","text":"<p>At this point, when you still haven't found a solution to your problem, we encourage you to create an issue.</p> <p>We have some issue-templates ready, to make sure that you include all of the necessary things we need to know:</p> <ul> <li>For a bug report, you can click here.</li> <li>For a feature request, you can instead click here.</li> </ul> <p>If you prefer, you can also open a blank issue. This will allow you to avoid having to follow the issue templates above. This might be useful if your issue doesn't cleanly fit into either of these two, or if you prefer to use your own categories and structure for the issue. That said, make please still make sure to include all of the relevant details when you do so.</p>"},{"location":"contributing/bugs-and-feature-reqs/#writing-good-bug-reports","title":"Writing good bug reports","text":"<p>Generally, the GitHub issue template should guide you towards telling us everything that we need to know. However, for the best results, keep reading through this section. In here, we'll explain how a well formatted issue should look like in general and what it should contain.</p>"},{"location":"contributing/bugs-and-feature-reqs/#issue-title","title":"Issue Title","text":"<p>A good title is short and descriptive. It should be a one-sentence executive summary of the issue, so the impact and severity of the bug you want to report can be inferred right from the title.</p> Example Clear Check-crossrefs incorrectly reports stdlib modules as unknown. Wordy When check-crossrefs is enabled, stdlib modules get reported as unknown, causing warnings. Unclear Incorrect warnings Non-english Check-crossrefs informa incorrectamente que los m\u00f3dulos stdlib son desconocidos Useless Help"},{"location":"contributing/bugs-and-feature-reqs/#bug-description","title":"Bug description","text":"<p>Now, to the bug you want to report. Provide a clear, focused, specific and concise summary of the bug you encountered. Explain why you think this is a bug that should be reported to us. Adhere to the following principles:</p> <ol> <li>Explain the what, not the how \u2013 don't explain how to reproduce the bug here,    we're getting there. Focus on articulating the problem and its impact as clearly as possible.</li> <li>Keep it short and concise - if the bug can be precisely explained in one or two sentences, perfect. Don't    inflate it - maintainers and future users will be grateful for having to read less.</li> <li>Don't under-explain - don't leave out important details just to keep things short. While keeping things short is    important, if something is relevant, mention it. It is more important for us to have enough information to be able    to understand the bug, even if it means slightly longer bug report.</li> <li>One bug at a time - if you encounter several unrelated bugs, please create separate issues for them. Don't    report them in the same issue, as this makes it difficult for others when they're searching for existing issues and    also for us, since we can't mark such an issue as complete if only one of the bugs was fixed.</li> </ol> <p> Stretch goal \u2013 if you found a workaround or a way to fix the bug, you can add it as a comment on the issue, to help other users temporarily mitigate the problem before we can fix the bug in our code base.</p>"},{"location":"contributing/bugs-and-feature-reqs/#reproduction","title":"Reproduction","text":"<p>A minimal reproducible example is at the heart of every well-written bug report, as it allows us maintainers to instantly recreate the necessary conditions to inspect the bug and quickly find its root cause from there. It's a proven fact that issues with concise and small reproductions can be fixed much faster.</p> <p>Focus on keeping your example minimal, ideally, test out the bug in a brand new temporary project, with as little dependencies as possible (ideally just this library). Use a minimal <code>mkdocs.yml</code> configuration, with only what's necessary to demonstrate the bug. In most cases, it's enough to submit 3 files: <code>mkdocs.yml</code>, a single <code>docs.md</code> and a single <code>source.py</code>.</p> <p>Once you have your reproducible example ready, just give us these files as code snippets. Alternatively, you can also link us to a github gist, or something similar.</p> How to include code-snippets (markdown) <p>In case you're not yet familiar with the syntax, GitHub issues use <code>markdown</code> format, which means you can use some nice custom formatting to make the text appear distinct. One of these formatting options is a source-code block / code snippet. To include one, you will want to use the following syntax:</p> <pre><code>```language\nyour code\nit can be multiline\n```\n</code></pre> <p>Note that the symbols used here aren't single quotes (<code>'</code>), they're backticks: <code>`</code>. On an english keyboard, you can type these using the key right below escape (also used for tildes: <code>~</code>).</p> <p>The <code>language</code> controls how the code will be highlighted. For python, you can use <code>python</code>, for yaml, <code>yaml</code>, etc.</p> <p>Sometimes, the bug can't be described in terms of code snippets, such as when reporting a mistake in the documentation. In that case, provide a link to the documentation or whatever other relevant things that will allows us to see the bug with minimal effort. In certain cases, it might even be fine to leave the reproduction steps section empty.</p>"},{"location":"contributing/bugs-and-feature-reqs/#next-steps","title":"Next steps","text":"<p>Once the issue is submitted, you have 2 options:</p>"},{"location":"contributing/bugs-and-feature-reqs/#wait-for-us-to-address-it","title":"Wait for us to address it","text":"<p>We will try to review your issue as soon as possible. Please be patient though, as this is an open-source project maintained by volunteers, who work on it simply for the fun of it. This means that we may sometimes have other priorities in life or we just want to work on some more interesting tasks first. It might therefore take a while for us to get to your issue, but we try and do our best to respond reasonably quickly, when we can. Even when things are slower, we kindly ask you to avoid posting comments like \"Any progress on this?\" as they are not helpful and only create unnecessary clutter in the discussion.</p> <p>When we do address your issue, we might need further information from you. GitHub has a notification system, so once we respond, you will be notified there. Note that, by default, these notifications might not be forwarded to your email or elsewhere, so please check GitHub periodically.</p> <p>Finally, when we address your issue, we will mark the issue as closed (GitHub will notify you of this too). Once that happens, your bug should be fixed / feature implemented, but we appreciate it if you take the time to verify that everything is working correctly. If something is still wrong, you can reopen the issue and let us know.</p> <p>Issues are fixed on the main branch</p> <p>Do note that when we close an issue, it means that we have fixed your issue in the <code>main</code> branch of the repository.   That doesn't necessarily mean the fix has been released on PyPI yet, so you might still need to wait a while unil   the next release is out. Alternatively, you can also try the git installation to get the   project right from that latest <code>main</code> branch.</p>"},{"location":"contributing/bugs-and-feature-reqs/#attempt-to-solve-it-yourself","title":"Attempt to solve it yourself","text":"<p>Quote</p> <p>The fastest way to get something done is to avoid waiting on others.</p> <p>If you wish to try and tackle the bug yourself, let us know by commenting on the issue with something like \"I'd like to work on this\". This helps us avoid duplicate efforts and ensures that we don't work on something you're already addressing.</p> <p>Once a maintainer sees your comment, they will assign the issue to you. Being assigned is a soft approval from us, giving you the green light to start working.</p> <p>Of course, you are welcome to start working on the issue even before being officially assigned. However, please be aware that sometimes we choose not to fix certain bugs for specific reasons. In such cases, your work might not end up being used.</p> <p>Before starting your work though, make sure to also read our pull request guide.</p>"},{"location":"contributing/making-a-pr/","title":"Making a PR","text":"<p>Work In Progress</p> <p>This page is still being written.</p>"},{"location":"meta/changelog/","title":"Changelog","text":"<p>Major and minor releases include the changes specified in prior development releases.</p>"},{"location":"meta/changelog/#version-101-2025-02-12","title":"Version 1.0.1 (2025-02-12)","text":"<p>Documentation improvements.</p>"},{"location":"meta/changelog/#version-100-2025-02-12","title":"Version 1.0.0 (2025-02-12)","text":"<p>This is the initial release following a rewrite of the project (fork).</p>"},{"location":"meta/changelog/#breaking-changes","title":"Breaking changes","text":"<ul> <li>Handler name was renamed to <code>python_betterrefs</code> (from <code>python_xrefs</code>)</li> <li>Config option <code>relative_crossrefs</code> was renamed to <code>better_crossrefs</code></li> <li>Config option <code>better_crossrefs</code> (previously <code>relative_crossrefs</code>) is now enabled by default</li> </ul>"},{"location":"meta/changelog/#other-changes","title":"Other changes","text":"<ul> <li>Rewrite the project documentation</li> <li>Move to <code>basedpyright</code> type-checker (from mypy)</li> <li>Move to <code>uv</code> package manager (from condadev)</li> <li>Improve CI workflows</li> <li>Improve testing</li> </ul>"},{"location":"meta/fork/","title":"Fork notice","text":"<p>This project is a fork of the excellent mkdocstrings-python-xref project. The primary reason for forking was personal curiosity with how this project worked, though another reason was also that the original project was somewhat slow at addressing some issues and used fairly uncommon packaging practices when it comes to modern python, which IMO made it harder to contribute to.</p> <p>At its core, this fork retains the original functionality while addressing compatibility issues that arose as its dependencies (namely: mkdocstrings, mkdocstrings-python, mkdocstrings-autorefs, and griffe) were updated.</p> <p>In addition, significant improvements have been made to the codebase, including cleanup and updates to follow modern packaging practices. For example, this project moved away from Conda in favor of uv.</p> <p>We\u2019ve also placed a greater emphasis on properly managing project dependencies. Stricter version requirements have been applied to ensure stability, meaning that new versions of dependencies will only be supported once they\u2019ve been properly tested. The goal is to automate this process with GitHub workflows that will periodically check for new versions, run tests, and publish a new PyPI release if all tests pass. This is particularly important given this library's reliance on internal features of mkdocstrings-python, which means breakages are common when dependencies are updated.</p> <p>It's important to note that this is a \"hard fork,\" meaning future updates to the original mkdocstrings-python-xref will not necessarily be merged back here. This is mainly because the code-base of this project has become sufficiently different to make that task pretty hard. However, if a relevant feature from the original project is introduced, we may consider porting it to this fork. That said, considering this project haven't released a new feature in quite a while now, this likely won't be a concern.</p> <p>Note</p> <p>Due to technical reasons, this project is not marked as a \"fork\" on GitHub, even though it is one. Forked repositories come with limitations, such as disappearing if the original repo is made private, or creating confusion by suggesting this project is still work-in-progress aimed at contributing back to the original. Using a standalone repository helps avoid these issues and makes it clear that this is an independent continuation of the original project.</p>"},{"location":"meta/fork/#acknowledgements","title":"Acknowledgements","text":"<p>This project would not exist without the original mkdocstrings-python-xref project, created by Christopher Barber and the Analog Devices, Inc. We owe a huge thanks to them for their work, which laid the foundation for this fork and also suggested the original idea of the improved syntax for cross-references.</p>"},{"location":"meta/fork/#legal-notice","title":"Legal notice","text":"<p>The purpose of this page is to acknowledge the original author and clarify the reasons behind this fork, as well as the changes that have been made since. For the legal information required for derivative works under the Apache 2.0 license, please refer to the license page instead.</p>"},{"location":"meta/license/","title":"License","text":""},{"location":"meta/license/#source-code","title":"Source Code","text":"<p>This project's source code is licensed under the Apache 2.0 license.</p> <p>This license allows you to use <code>mkdocstrings-python-betterrefs</code> in any project, regardless of it's license (including a proprietary one). You can change the code, distribute it or even use it for commercial purposes. That said, if you wish to do either of these, you are required to include a copyright notice, the license fulltext and state any significant changes made to the software; include a <code>NOTICE</code> file with the attribution notes.</p> <p>Tip</p> <p>If you want to see a quick glance of what this license allows, prohibits &amp; requires, check it out in tl;dr legal.</p> Full LICENSE text LICENSE.txt<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2022-2023 Analog Devices, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre> <p>Note</p> <p>If you need a copyright header for attribution, you can use:</p> RenderedHTML <p>mkdocstrings-python-betterrefs</p> <p>Copyright \u00a9 2022-2023 Analog Devices, Inc. Copyright \u00a9 2025 ItsDrike &lt;itsdrike@protonmail.com&gt;</p> <pre><code>&lt;a href=\"https://github.com/ItsDrike/mkdocstrings-python-betterrefs\"&gt;mkdocstrings-python-betterrefs&lt;/a&gt;\n\nCopyright &amp;copy; 2022-2023 Analog Devices, Inc.&lt;br&gt;\nCopyright &amp;copy; 2025 ItsDrike &amp;lt;itsdrike@protonmail.com&amp;gt;\n</code></pre>"},{"location":"meta/license/#this-documentation","title":"This documentation","text":"<p>This documentation itself follows a Creative Commons license: CC BY-NC-SA 4.0 </p> <p>Note</p> <p>If you need a copyright header for proper attribution, you can use:</p> RenderedHTML <p>mkdocstrings-python-betterrefs documentation \u00a9 2025 by ItsDrike</p> <p>If you also need the license identifier, use the following:</p> <p>CC BY-NC-SA 4.0 </p> <pre><code>&lt;a href=\"https://itsdrike.github.io/mkdocstrings-python-betterrefs\"&gt;mkdocstrings-python-betterrefs documentation&lt;/a&gt; &amp;copy; 2025 by &lt;a href=\"mailto:itsdrike@protonmail.com\"&gt;ItsDrike&lt;/a&gt;\n</code></pre> <p>If you also need the license identifier, use the following:</p> <pre><code>&lt;a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"&gt;CC BY-NC-SA 4.0&lt;/a&gt; &lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\" alt=\"\"&gt;\n</code></pre>"},{"location":"meta/license/#fork-notice","title":"Fork NOTICE","text":"<p>Note that this project itself is a fork of <code>mkdocstrings-python-xref</code> and it is distributed under the same (Apache 2.0) license (fulltext of this license was already shown above). As such, it is required to include a <code>NOTICE</code> file detailing the changes made in this fork. The full text of the <code>NOTICE</code> file, which is included below, lists these modifications.</p> Full NOTICE text NOTICE.md<pre><code>This project forks off of the original project:\n[mkdocstrings-python-xref](https://github.com/analog-garage/mkdocstrings-python-xref). This project was created by\nChristopher Barber and copyrighted by Analog Devices, Inc. (2022-2023)\n\nThe original project was licensed under the Apache 2.0 License, which this fork also uses. According to the terms of\nthe Apache 2.0 License, significant modifications made to the project are required to be listed here. Below are the key\nchanges introduced in this fork:\n\n- **Documentation:** The documentation has been extensively modified and relicensed under a Creative Commons license\n  (see the `LICENSE.txt` file in the `docs/` directory for more information). The usage page retains some original\n  content but has been reorganized for better readability.\n- **User Experience:** This fork aims to make migration from the original project as seamless as possible. While the\n  user interface remains largely the same, the handler has been renamed from mkdocstrings-python-xref to\n  mkdocstrings-python-betterrefs, some config options were also renamed.\n- **Source Code:** Various changes have been made to the source code, with more ongoing. For a detailed list of changes,\n  please refer to the project's `CHANGELOG.md` file.\n\nThe reason for this fork was mainly personal curiosity and the desire to heavily modify the packaging practices and the\ncode base, but also to address some issues which the original maintainer took a while to get to. This project is\nessentially a direct continuation of the original project, bringing it up-to-date with latest mkdocs-python.\n</code></pre>"},{"location":"meta/support/","title":"Support","text":"<ul> <li>If you found a bug, or wish to propose a new feature, please follow this guide.</li> <li>If you just want to ask a question, feel free to do so on the project's discussions board.</li> <li>In case you have a security concern, or some other problem that requires private resolution, you can send me an   email (<code>itsdrike@protonmail.com</code>).</li> </ul>"},{"location":"meta/versioning/","title":"Versioning","text":"<p>Pre-release phase</p> <p><code>mkdocstrings-python-betterrefs</code> is currently in the pre-release phase (pre v1.0.0). During this phase, these guarantees will NOT be followed! This means that breaking changes can occur in minor version bumps. That said, micro version bumps are still strictly for bugfixes, and will not include any features or breaking changes.</p> <p>This library follows semantic versioning model, which means the major version is updated every time there is an incompatible (breaking) change made to the public API.</p> <p>In our case, the public API refers to the cross-reference syntax. A major version bump would therefore mean a potentially breaking update, requiring you to modify the cross references to be compatible with the new version.</p>"},{"location":"meta/versioning/#examples-of-breaking-level-change-major-bump-vx00","title":"Examples of Breaking level change (major bump: <code>vX.0.0</code>)","text":"<p>We try to avoid breaking changes as much as we can, but it might sometimes be beneficial, especially if it's to resolve a problem, that people might technically be relying on.</p> <p>Here are some examples of what constitutes a breaking change:</p> <ul> <li>Dropping support for the <code>(m)</code> syntax, resolving to the current module</li> <li>Changing the behavior of a trailing <code>.</code> (previously just appending the title text) to now first clean up any markup   from the title (like bold/italic or code markup)</li> <li>Using stricter validation of cross-references (breaking, as new warnings will be produced on xrefs that were   considered as valid before and didn't produce warnings)</li> <li>Dropping support for <code>?</code> prefixing references to avoid cross-ref validation, as it's no longer necessary (validation   now always works, ignoring it should never be needed)</li> <li>Removing or renaming a configuration option for the handler (like <code>check_crossrefs</code>)</li> <li>Changing the default value for a configuration option</li> </ul>"},{"location":"meta/versioning/#examples-of-a-feature-level-change-minor-bump-v1x0","title":"Examples of a Feature level Change (minor bump: <code>v1.X.0</code>)","text":"<ul> <li>Dropping support of an old <code>mkdocstrings-python</code> version</li> <li>Introducing support of a new <code>mkdocstrings-python</code> version</li> <li>Introducing new cross-reference syntax that doesn't interfere with the existing one</li> <li>Adding a configuration option for the handler (like <code>check_crossrefs</code>), assuming it doesn't affect the default   behavior in a breaking way, at least not by default.</li> <li>Adding support for validating more cross-references (not breaking, as people will have these marked as ignored, this   just allows to no longer ignore these xrefs from validation)</li> </ul>"},{"location":"meta/versioning/#examples-of-a-patch-level-change-patch-bump-v10x","title":"Examples of a Patch level change (patch bump: <code>v1.0.X</code>)","text":"<ul> <li>Adding unit-tests</li> <li>Adding CI workflows</li> <li>Changing the documentation</li> <li>Changing the internal code in any way</li> </ul> <p>Relying on the handler class, or any other code components from this library is not supported. All code for this library is considered a part of the private API and is subject to any changes without backwards compatibility in mind.</p> <p>We usually make these updates with the goal of improving the code readability or efficiency.</p>"}]}