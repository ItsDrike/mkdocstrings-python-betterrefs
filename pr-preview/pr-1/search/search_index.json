{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mkdocstrings-python-betterrefs","text":"<p>Python handler for mkdocstrings with improved handling for cross-references, including relative ones.</p> <p>mkdocstrings is an awesome plugin for MkDocs that can generate Markdown API documentation from comments in code. The standard python handler allows you to create cross-reference links using the syntax <code>[&lt;title&gt;][&lt;path&gt;]</code> where the path must either be the fully qualified name of the referent or is empty, in which case the path is taken from the title.</p> <p>mkdocstrings-python does already have support for cross-references, however, it is currently only available in the insiders edition, which is limited to their sponsors. Additionally, this implementation is fairly limited in comparison to what this project offers.</p> <p>Tip</p> <p>For more information on the mkdocstrings-python official support of relative cross-references, check out the feature request proposing them: here, and the docs detailing the configuration option: here.</p> <p>Even though the issue proposed the syntax similar to that used by this handler, the official relative crossrefs support ended up being a very limited version of it.</p> <p>It is expected that relative cross-references will make it into the open-source version once a funding goal of $2,000 is reached. You can see the current progress towards this goal here.</p> <p>This package extends mkdocstrings-python to support an improved cross-reference syntax, that allows you to write your doc-strings with these nicer cross-references. The primary goal is making cross-references shorter and less repetitive.</p>"},{"location":"LICENSE/","title":"Documentation License","text":"<p>This documentation itself does NOT follow the primary project license!</p> <p>Instead, it follows a Creative Commons license: CC BY-NC-SA 4.0 </p>"},{"location":"LICENSE/#attribution","title":"Attribution","text":"<p>If you need a copyright header for proper attribution, you can use:</p> <p>mkdocstrings-python-betterrefs documentation \u00a9 2025 by ItsDrike</p> <p>In HTML:</p> <pre><code>&lt;a href=\"https://itsdrike.github.io/mkdocstrings-python-betterrefs\"&gt;mkdocstrings-python-betterrefs documentation&lt;/a&gt;\n&amp;copy; 2025 by &lt;a href=\"mailto:itsdrike@protonmail.com\"&gt;ItsDrike&lt;/a&gt;\n</code></pre> <p>If you also need the license identifier, use the following:</p> <pre><code>&lt;a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"&gt;CC BY-NC-SA 4.0&lt;/a&gt;\n&lt;img\n    style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\"\n    src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\"\n    alt=\"\"\n/&gt;&lt;img\n    style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\"\n    src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\"\n    alt=\"\"\n/&gt;&lt;img\n    style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\"\n    src=\"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1\"\n    alt=\"\"\n/&gt;&lt;img\n    style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\"\n    src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\"\n    alt=\"\"\n/&gt;\n</code></pre>"},{"location":"LICENSE/#notice","title":"Notice","text":"<p>This documentation is a modified version of the documentation from the original project (mkdocstrings-python-xref). The original documentation was not licensed separately from the project, which means it was following the Apache 2.0 license.</p> <p>This documentation has been heavily modified in various ways, however, the usage page remains fairly similar to the original.</p> <p>See the <code>NOTICE.txt</code> file in the root directory of this project for further details.</p>"},{"location":"config/","title":"Configuration","text":"<p>Configuration is the same as with mkdocstrings-python except that the handler name should be <code>python_betterrefs</code> instead of <code>python</code>. Because this handler extends the standard mkdocstrings-python handler, the same options are available.</p> <p>Additional options are added by this extension. Currently, there are two:</p> <ul> <li> <p>better_crossrefs - If set to true enables use of better cross-reference syntax provided by this handler   extension (setting this to false would essentially mimic the <code>python</code> handler). This is enabled by default, so you   shouldn't need to specify it unless you want to disable this behavior.</p> </li> <li> <p>check_crossrefs - Enables early checking of all cross-references. Note that this option only takes affect if   better_crossrefs is also true. This option is true by default, so you only need to specify it if you wish to   disable this checking. Checking can also be disabled on a per-case basis by prefixing a reference with '?', e.g.   <code>[something][?dontcheckme]</code>.</p> </li> </ul> <p>mkdocs.yml plugins specification using this handler</p> <pre><code>plugins:\n    - search\n    - mkdocstrings:\n          default_handler: python_betterrefs\n          handlers:\n              python_betterrefs:\n                  options:\n                      docstring_style: google\n                      docstring_options:\n                          ignore_init_summary: true\n                      merge_init_into_class: true\n                      better_crossrefs: true\n                      check_crossrefs: false\n                      separate_signature: true\n                      show_source: true\n                      show_root_full_path: true\n                  inventories:\n                      - https://docs.python.org/3/objects.inv\n</code></pre>"},{"location":"install/","title":"Installation","text":"<p>Installing alongside <code>mkdocstrings-python</code></p> <p>You don't need to explicitly specify <code>mkdocstrings-python</code> as a dependency, as this package already lists it as it's dependency, which means installing <code>mkdocstrings-python-betterrefs</code> will also install <code>mkdocstrings-python</code> for you.</p>"},{"location":"install/#pypi-stable-version","title":"PyPI (stable) version","text":"<p><code>mkdocstrings-python-betterrefs</code> is available on PyPI and can be installed like any other python library with:</p>  pip poetry rye uv pdm <pre><code>pip install mkdocstrings-python-betterrefs\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>poetry add mkdocstrings-python-betterrefs\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add mkdocstrings-python-betterrefs\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv pip install mkdocstrings-python-betterrefs\n</code></pre> <p>uv is an ultra fast dependency resolver and package installer, written in Rust.</p> <pre><code>pdm add mkdocstrings-python-betterrefs\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p>"},{"location":"install/#latest-git-version","title":"Latest (git) version","text":"<p>We don't guarantee any stability with method of installing</p> <p>If you wish to install the latest available version (the one you currently see in the <code>main</code> git branch), you may instead choose this method of installing.</p> <p>This kind of installation should only be done if you wish to test some new unreleased features and it's likely that you will encounter bugs.</p> <p>That said, this library is still in development, and there may be some features that you might wish to try, even though they're not yet available in the latest release. This method of installation allows you to do just that.</p> <p>To install the latest version of <code>mkdocstrings-python-betterrefs</code> directly from the <code>main</code> git branch, use:</p>  pip poetry rye uv pdm <pre><code>pip install 'mkdocstrings-python-betterrefs@git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs@main'\n</code></pre> <p>pip is the main package installer for Python.</p> <pre><code>poetry add 'git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs#main'\n</code></pre> <p>Poetry is an all-in-one solution for Python project management.</p> <pre><code>rye add mkdocstrings-python-betterrefs --git='https://github.com/ItsDrike/mkdocstrings-python-betterrefs' --branch main\n</code></pre> <p>Rye is an all-in-one solution for Python project management, written in Rust.</p> <pre><code>uv pip install 'mkdocstrings-python-betterrefs@git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs@main'\n</code></pre> <p>uv is an ultra fast dependency resolver and package installer, written in Rust.</p> <pre><code>pdm add \"git+https://github.com/ItsDrike/mkdocstrings-python-betterrefs@main\"\n</code></pre> <p>PDM is an all-in-one solution for Python project management.</p>"},{"location":"license/","title":"License","text":"<p>This project's source code is licensed under the Apache 2.0 license.</p> <p>This license allows you to use <code>mkdocstrings-python-betterrefs</code> in any project, regardless of it's license (including a proprietary one). You can change the code, distribute it or even use it for commercial purposes. That said, if you wish to do either of these, you are required to include a copyright notice, the license fulltext and state any significant changes made to the software; include a <code>NOTICE</code> file with the attribution notes.</p> Full LICENSE text LICENSE.txt<pre><code>                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2022-2023 Analog Devices, Inc.\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n</code></pre>"},{"location":"license/#this-documentation","title":"This documentation","text":"<p>This documentation itself follows a Creative Commons license: CC BY-NC-SA 4.0 </p> <p>Tip</p> <p>If you need a copyright header for proper attribution, you can use:</p> RenderedHTML <p>mkdocstrings-python-betterrefs documentation \u00a9 2025 by ItsDrike</p> <pre><code>&lt;a href=\"https://itsdrike.github.io/mkdocstrings-python-betterrefs\"&gt;mkdocstrings-python-betterrefs documentation&lt;/a&gt; &amp;copy; 2025 by &lt;a href=\"mailto:itsdrike@protonmail.com\"&gt;ItsDrike&lt;/a&gt;\n</code></pre> <p>If you also need the license identifier, use the following:</p> <pre><code>&lt;a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\"&gt;CC BY-NC-SA 4.0&lt;/a&gt; &lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/cc.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/by.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/nc.svg?ref=chooser-v1\" alt=\"\"&gt;&lt;img style=\"height:22px!important;margin-left:3px;vertical-align:text-bottom;\" src=\"https://mirrors.creativecommons.org/presskit/icons/sa.svg?ref=chooser-v1\" alt=\"\"&gt;\n</code></pre>"},{"location":"license/#fork-notice","title":"Fork NOTICE","text":"<p>Note that this project itself is a fork of <code>mkdocstrings-python-xref</code>. The original project also uses the same (Apache 2.0) license. For that reason, below is our <code>NOTICE</code> file:</p> Full NOTICE text NOTICE.txt<pre><code>This project forks off of the original project: mkdocstrings-python-xref\n(https://github.com/analog-garage/mkdocstrings-python-xref). This project was created by Christopher Barber, with the\ncopyright being assigned to Analog Devices, Inc. (2022-2023)\n\nThe original project was licensed under the Apache 2.0 license, which is the same license that this fork continues to\nuse. This license requires that any significant changes made to the project are listed in this file. Therefore, below\nis a description of all significant modifications in comparison to the original project:\n\n- The documentation for this project has been heavily modified and relicensed under a creative commons license (see\n  the LICENSE.txt file in the docs/ directory for more info). The only original remnants are the in the usage page,\n  which remains fairly similar to the original, most significant difference being splitting the information into\n  categories to improve readability.\n- When it comes to the user experience, this fork attempts to make migration from the original project effortless, meaning the usage for end-users remains pretty much the same, other than the handler being renamed from mkdocstrings-python-xref to mkdocstrings-python-betterrefs.\n- As for the source-code of the project, modifications are still work-in-progress, significant changes will be listed\n  as they happen.\n\nThe reason for this fork is that the original project seems to no longer be maintained, or at least not actively so. This project is essentially a direct continuation of the original project, bringing it up-to-date with latest mkdocs-python.\n</code></pre>"},{"location":"support/","title":"Getting help","text":"<p>You can file bug reports or feature requests on GitHub or if you just want to ask a question on the project's discussions board</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#relative-cross-references","title":"Relative cross-references","text":"<p>Like already mentioned before, <code>mkdocstrings-python-betterrefs</code> allows you to use a custom syntax when specifying your cross-references. The most important feature is the relative cross-references support. Check the example below:</p> AbsoluteRelative mypkg/mymod.py<pre><code>class OtherClass: ...\n\nclass MyClass:\n    def this_method(self):\n        \"\"\"\n        See [other_method][mypkg.mymod.MyClass.other_method] and\n        from [OtherClass][mypkg.mymod.OtherClass].\n        \"\"\"\n</code></pre> mypkg/mymod.py<pre><code>class OtherClass: ...\n\nclass MyClass:\n    def other_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        See [other_method][..other_method] and [OtherClass][(m).OtherClass]\n        \"\"\"\n</code></pre> <p>The relative path specifier has the following form:</p> <ul> <li>If the path begins with <code>(c)</code>, that will be replaced by the path of the class that contains the doc-string.</li> <li>If the path begins with <code>(m)</code>, that will be replaced by the path of the module that contains the doc-string.</li> <li>If the path begins with <code>(p)</code>, that will be replaced by the path of the package that contains the doc-string. If   there is only one module in the system it will be treated as a package.</li> <li> <p>If the path begins with one or more <code>.</code> characters, then it well be expanded to the path of the current   doc-string, in which it occurs, or it's parent elements.</p> <p>For example, when used in a doc-string for a method, <code>.</code> would get replaced by the method, <code>..</code> would get replaced by the class and <code>...</code> would get replaced with the module.</p> </li> <li> <p>Similarly, if the path begins with one or more <code>^</code> characters, then it will be replaced by the path of the parent   element. Essentially, this is just a shorthand for <code>..</code>, which occurs a lot.</p> <p>For example, when used in a doc-string for a method, <code>^</code> would get replaced with the class and <code>^^</code> would get replaced with the module.</p> </li> </ul> <p>Note</p> <p>When using either <code>^</code> or <code>..</code> we have found that going up more than one or two levels makes cross-references difficult to read and should be avoided</p>"},{"location":"usage/#avoiding-repetition","title":"Avoiding repetition","text":"<p>On top of just the relative reference support, there's also some special handling to reduce the repetition of references like: <code>[MyClass][..MyClass]</code>, allowing for a much more compact: <code>[MyClass][..]</code> syntax.</p> <p>This rule is applied whenever the cross-reference path ends in <code>.</code>; When this happens, the title text will be appended to the path (ignoring bold, italic or code markup).</p>"},{"location":"usage/#demonstration","title":"Demonstration","text":"<p>Quick demonstration:</p> mkdocstrings-python-betterrefsmkdocstrings-python this_package/this_module.py<pre><code>def some_func(): ...\n\nclass MyClass:\n    def that_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        [MyClass][^]\n        Also [MyClass][(c)]\n        And [`MyClass`][(m).] yet again\n        [`that_method`][^.]\n        Also [`that_method`][..]\n        [init method][(c).__init__]\n        [this module][(m)]\n        [this package][(p)]\n        [that module][(p).that_module] or [that module][(p).]\n        [OtherClass][(m).]\n        [some_func][^^.] or [some_func][...]\n        \"\"\"\n</code></pre> this_package/this_module.py<pre><code>def some_func(): ...\n\nclass MyClass:\n    def that_method(self): ...\n\n    def this_method(self):\n        \"\"\"\n        [MyClass][this_package.this_module.MyClass]\n        Also [MyClass][this_package.this_module.MyClass]\n        And [`MyClass`][this_package.this_module.MyClass] yet again\n        [`that_method`][this_package.this_module.MyClass.that_method]\n        Also [`that_method`][this_package.this_module.MyClass.that_method]\n        [init method][this_package.this_module.MyClass.__init__]\n        [this module][this_package.this_module]\n        [this package][this_package]\n        [that module][this_package.that_module] or [that module][this_package.that_module]\n        [OtherClass][this_package.this_module.OtherClass]\n        [some_func][this_package.this_module.some_func] or [some_func][this_package.this_module]\n        \"\"\"\n</code></pre>"},{"location":"usage/#cross-reference-checking","title":"Cross-reference checking","text":"<p>If <code>check_crossrefs</code> is enabled (default), then all cross-reference expressions will be checked to ensure that they exist. Failures will be reported with the source location information.</p> <p>Otherwise, missing cross-references will still be reported by <code>mkdocstrings</code> directly, however, these reports do not include the source location, which often makes it difficult to find the docstring causing this issue in the source code.</p> <p>Note that the errors generated by this feature are in addition to the errors from mkdocstrings, which will mean you will see 2 errors for each invalid reference.</p> <p>The current implementation of this feature can produce false errors for definitions from the python standard library, or external imported libraries. You can disable the check on a case-by-case basis by prefixing the reference expression with a <code>?</code>, for example:</p> <pre><code>def foo() -&gt; pathlib.Path:\n    \"\"\"\n    This function returns a [Path][?pathlib.] instance.\n    \"\"\"\n</code></pre>"}]}